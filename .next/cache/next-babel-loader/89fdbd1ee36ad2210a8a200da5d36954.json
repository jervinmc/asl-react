{"ast":null,"code":"var _jsxFileName = \"/Users/jervinmacalawa/Signify/pages/index.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect, useRef, useState } from 'react';\nimport service from '../services/service';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHandPaper } from '@fortawesome/free-solid-svg-icons'; // We'll limit the processing size to 200px.\n\nconst maxVideoSize = 224;\nconst LETTERS = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '_NOTHING', '_SPACE'];\nconst THRESHOLD = 5;\nconst THRESHOLDS = {\n  S: 3,\n  E: 5,\n  A: 5,\n  N: 6,\n  R: 5\n};\n/**\n * What we're going to render is:\n *\n * 1. A video component so the user can see what's on the camera.\n *\n * 2. A button to generate an image of the video, load OpenCV and\n * process the image.\n *\n * 3. A canvas to allow us to capture the image of the video and\n * show it to the user.\n */\n\nexport default function Page() {\n  const videoElement = useRef(null);\n  const canvasEl = useRef(null);\n  const outputCanvasEl = useRef(null);\n  let {\n    0: letter,\n    1: setLetter\n  } = useState(null);\n  let {\n    0: loading,\n    1: setLoading\n  } = useState(true);\n  let {\n    0: fps,\n    1: setFps\n  } = useState(0);\n  let {\n    0: words,\n    1: setWords\n  } = useState('');\n  /**\n   * In the onClick event we'll capture a frame within\n   * the video to pass it to our service.\n   */\n\n  async function processImage() {\n    if (videoElement !== null && canvasEl !== null && typeof videoElement.current !== 'undefined' && videoElement.current !== null) {\n      let frames = 0;\n      let start = Date.now();\n      let prevLetter = '';\n      let count = 0;\n      let _words = '';\n\n      const processWord = () => {\n        let wordsSplit = _words.split(' ');\n\n        fetch(`/api/autocorrect?word=${wordsSplit[wordsSplit.length - 1]}`).then(res => res.json()).then(json => {\n          const correctedWord = json['correctedWord'];\n          speechSynthesis.speak(new SpeechSynthesisUtterance(correctedWord));\n          wordsSplit.pop();\n          _words = wordsSplit.join(' ') + ' ' + correctedWord.toUpperCase() + ' ';\n          setWords(wordsSplit.join(' ') + ' ' + correctedWord.toUpperCase() + ' ');\n        });\n      };\n\n      videoElement.current.addEventListener('ended', () => processWord());\n\n      while (true) {\n        const ctx = canvasEl.current.getContext('2d');\n        ctx.drawImage(videoElement.current, 0, 0, maxVideoSize, maxVideoSize);\n        const image = ctx.getImageData(0, 0, maxVideoSize, maxVideoSize); // Processing image\n\n        const processedImage = await service.imageProcessing(image); // Render the processed image to the canvas\n\n        const ctxOutput = outputCanvasEl.current.getContext('2d');\n        ctxOutput.putImageData(processedImage.data.payload, 0, 0);\n        const prediction = await service.predict(processedImage.data.payload);\n        const predictedLetter = prediction.data.payload;\n        const letterValue = LETTERS[predictedLetter];\n        setLetter(letterValue);\n\n        if (letterValue !== prevLetter) {\n          if (!THRESHOLDS[prevLetter] ? count > THRESHOLD : count > THRESHOLDS[prevLetter]) {\n            if (prevLetter === '_SPACE') processWord();else {\n              _words = _words + (prevLetter === '_NOTHING' ? '' : prevLetter);\n              setWords((state, props) => state + (prevLetter === '_NOTHING' ? '' : prevLetter));\n            }\n          }\n\n          count = 0;\n        } else {\n          count++;\n        }\n\n        prevLetter = letterValue;\n        frames++;\n\n        if (frames === 10) {\n          setFps(10 / ((Date.now() - start) / 1000));\n          frames = 0;\n          start = Date.now();\n        }\n      }\n    }\n  }\n  /**\n   * In the useEffect hook we'll load the video\n   * element to show what's on camera.\n   */\n\n\n  useEffect(() => {\n    async function initCamera() {\n      videoElement.current.width = maxVideoSize;\n      videoElement.current.height = maxVideoSize;\n\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: false,\n          video: {\n            facingMode: 'environment',\n            width: maxVideoSize,\n            height: maxVideoSize\n          }\n        });\n        videoElement.current.srcObject = stream;\n        return new Promise(resolve => {\n          videoElement.current.onloadedmetadata = () => {\n            resolve(videoElement.current);\n          };\n        });\n      }\n\n      const errorMessage = 'This browser does not support video capture, or this device does not have a camera';\n      alert(errorMessage);\n      return Promise.reject(errorMessage);\n    }\n\n    async function load() {\n      const videoLoaded = await initCamera();\n      await service.load();\n      videoLoaded.play();\n      setTimeout(processImage, 0);\n      setLoading(false);\n      return videoLoaded;\n    }\n\n    load();\n  }, []);\n  return __jsx(\"div\", {\n    style: {\n      marginTop: '2em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 5\n    }\n  }, __jsx(\"h1\", {\n    className: \"text-center text-heading\",\n    style: {\n      marginBottom: '0.5em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }\n  }), loading && __jsx(\"div\", {\n    className: \"row justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"col text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, __jsx(\"div\", {\n    className: \"spinner-border\",\n    style: {\n      width: '8em',\n      height: '8em',\n      marginBottom: '2em'\n    },\n    role: \"status\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }\n  }))), __jsx(\"div\", {\n    style: {\n      display: loading ? 'none' : 'block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }\n  }, __jsx(\"div\", {\n    className: \"row justify-content-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"col-xs-12 text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }, __jsx(\"video\", {\n    className: \"video\",\n    playsInline: true,\n    ref: videoElement,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  })), __jsx(\"canvas\", {\n    style: {\n      display: 'none'\n    },\n    ref: canvasEl,\n    width: maxVideoSize,\n    height: maxVideoSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 11\n    }\n  }), __jsx(\"canvas\", {\n    className: \"col-xs-12\",\n    style: {\n      display: 'none'\n    },\n    ref: outputCanvasEl,\n    width: maxVideoSize,\n    height: maxVideoSize,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 11\n    }\n  })), __jsx(\"div\", {\n    className: \"row justify-content-center text-center\",\n    style: {\n      marginTop: '2em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }\n  }, __jsx(\"h5\", {\n    className: \"text-letter\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }\n  }, \"Predicted Letter:\"), __jsx(\"h4\", {\n    className: \"text-letter\",\n    style: {\n      borderRadius: 10,\n      border: '2px solid #FFFFFF',\n      padding: '0.5em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }\n  }, letter))), __jsx(\"div\", {\n    className: \"row justify-content-center text-center\",\n    style: {\n      marginTop: '2em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 9\n    }\n  }, __jsx(\"div\", {\n    className: \"col-xs-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 11\n    }\n  }, __jsx(\"h3\", {\n    className: \"text-words\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }\n  }, \"Predicted Words:\"), __jsx(\"h2\", {\n    className: \"text-words\",\n    style: {\n      borderRadius: 10,\n      border: '2px solid #FFFFFF',\n      padding: '1em'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }\n  }, words), __jsx(\"p\", {\n    className: \"text-fps\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 13\n    }\n  }, \"FPS: \", fps.toFixed(3))))));\n}","map":{"version":3,"sources":["/Users/jervinmacalawa/Signify/pages/index.js"],"names":["useEffect","useRef","useState","service","FontAwesomeIcon","faHandPaper","maxVideoSize","LETTERS","THRESHOLD","THRESHOLDS","S","E","A","N","R","Page","videoElement","canvasEl","outputCanvasEl","letter","setLetter","loading","setLoading","fps","setFps","words","setWords","processImage","current","frames","start","Date","now","prevLetter","count","_words","processWord","wordsSplit","split","fetch","length","then","res","json","correctedWord","speechSynthesis","speak","SpeechSynthesisUtterance","pop","join","toUpperCase","addEventListener","ctx","getContext","drawImage","image","getImageData","processedImage","imageProcessing","ctxOutput","putImageData","data","payload","prediction","predict","predictedLetter","letterValue","state","props","initCamera","width","height","navigator","mediaDevices","getUserMedia","stream","audio","video","facingMode","srcObject","Promise","resolve","onloadedmetadata","errorMessage","alert","reject","load","videoLoaded","play","setTimeout","marginTop","marginBottom","display","borderRadius","border","padding","toFixed"],"mappings":"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","sourcesContent":["import { useEffect, useRef, useState } from 'react';\nimport service from '../services/service';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faHandPaper } from '@fortawesome/free-solid-svg-icons';\n\n// We'll limit the processing size to 200px.\nconst maxVideoSize = 224;\nconst LETTERS = [\n  'A',\n  'B',\n  'C',\n  'D',\n  'E',\n  'F',\n  'G',\n  'H',\n  'I',\n  'J',\n  'K',\n  'L',\n  'M',\n  'N',\n  'O',\n  'P',\n  'Q',\n  'R',\n  'S',\n  'T',\n  'U',\n  'V',\n  'W',\n  'X',\n  'Y',\n  'Z',\n  '_NOTHING',\n  '_SPACE',\n];\nconst THRESHOLD = 5;\n\nconst THRESHOLDS = {\n  S: 3,\n  E: 5,\n  A: 5,\n  N: 6,\n  R: 5,\n};\n/**\n * What we're going to render is:\n *\n * 1. A video component so the user can see what's on the camera.\n *\n * 2. A button to generate an image of the video, load OpenCV and\n * process the image.\n *\n * 3. A canvas to allow us to capture the image of the video and\n * show it to the user.\n */\nexport default function Page() {\n  const videoElement = useRef(null);\n  const canvasEl = useRef(null);\n  const outputCanvasEl = useRef(null);\n  let [letter, setLetter] = useState(null);\n  let [loading, setLoading] = useState(true);\n  let [fps, setFps] = useState(0);\n  let [words, setWords] = useState('');\n\n  /**\n   * In the onClick event we'll capture a frame within\n   * the video to pass it to our service.\n   */\n  async function processImage() {\n    if (\n      videoElement !== null &&\n      canvasEl !== null &&\n      typeof videoElement.current !== 'undefined' &&\n      videoElement.current !== null\n    ) {\n      let frames = 0;\n      let start = Date.now();\n      let prevLetter = '';\n      let count = 0;\n      let _words = '';\n\n      const processWord = () => {\n        let wordsSplit = _words.split(' ');\n        fetch(`/api/autocorrect?word=${wordsSplit[wordsSplit.length - 1]}`)\n          .then((res) => res.json())\n          .then((json) => {\n            const correctedWord = json['correctedWord'];\n            speechSynthesis.speak(new SpeechSynthesisUtterance(correctedWord));\n            wordsSplit.pop();\n            _words =\n              wordsSplit.join(' ') + ' ' + correctedWord.toUpperCase() + ' ';\n            setWords(\n              wordsSplit.join(' ') + ' ' + correctedWord.toUpperCase() + ' '\n            );\n          });\n      };\n\n      videoElement.current.addEventListener('ended', () => processWord());\n\n      while (true) {\n        const ctx = canvasEl.current.getContext('2d');\n        ctx.drawImage(videoElement.current, 0, 0, maxVideoSize, maxVideoSize);\n        const image = ctx.getImageData(0, 0, maxVideoSize, maxVideoSize);\n        // Processing image\n        const processedImage = await service.imageProcessing(image);\n        // Render the processed image to the canvas\n        const ctxOutput = outputCanvasEl.current.getContext('2d');\n        ctxOutput.putImageData(processedImage.data.payload, 0, 0);\n\n        const prediction = await service.predict(processedImage.data.payload);\n\n        const predictedLetter = prediction.data.payload;\n        const letterValue = LETTERS[predictedLetter];\n\n        setLetter(letterValue);\n        if (letterValue !== prevLetter) {\n          if (\n            !THRESHOLDS[prevLetter]\n              ? count > THRESHOLD\n              : count > THRESHOLDS[prevLetter]\n          ) {\n            if (prevLetter === '_SPACE') processWord();\n            else {\n              _words = _words + (prevLetter === '_NOTHING' ? '' : prevLetter);\n              setWords(\n                (state, props) =>\n                  state + (prevLetter === '_NOTHING' ? '' : prevLetter)\n              );\n            }\n          }\n          count = 0;\n        } else {\n          count++;\n        }\n        prevLetter = letterValue;\n        frames++;\n        if (frames === 10) {\n          setFps(10 / ((Date.now() - start) / 1000));\n          frames = 0;\n          start = Date.now();\n        }\n      }\n    }\n  }\n\n  /**\n   * In the useEffect hook we'll load the video\n   * element to show what's on camera.\n   */\n  useEffect(() => {\n    async function initCamera() {\n      videoElement.current.width = maxVideoSize;\n      videoElement.current.height = maxVideoSize;\n\n      if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          audio: false,\n          video: {\n            facingMode: 'environment',\n            width: maxVideoSize,\n            height: maxVideoSize,\n          },\n        });\n        videoElement.current.srcObject = stream;\n\n        return new Promise((resolve) => {\n          videoElement.current.onloadedmetadata = () => {\n            resolve(videoElement.current);\n          };\n        });\n      }\n      const errorMessage =\n        'This browser does not support video capture, or this device does not have a camera';\n      alert(errorMessage);\n      return Promise.reject(errorMessage);\n    }\n\n    async function load() {\n      const videoLoaded = await initCamera();\n      await service.load();\n      videoLoaded.play();\n      setTimeout(processImage, 0);\n      setLoading(false);\n      return videoLoaded;\n    }\n\n    load();\n  }, []);\n\n  return (\n    <div style={{ marginTop: '2em' }}>\n      <h1\n        className=\"text-center text-heading\"\n        style={{ marginBottom: '0.5em' }}\n      >\n        {/* <FontAwesomeIcon icon={faHandPaper} /> */}\n      </h1>\n      {loading && (\n        <div className=\"row justify-content-center\">\n          <div className=\"col text-center\">\n            <div\n              className=\"spinner-border\"\n              style={{ width: '8em', height: '8em', marginBottom: '2em' }}\n              role=\"status\"\n            ></div>\n          </div>\n        </div>\n      )}\n      <div style={{ display: loading ? 'none' : 'block' }}>\n        <div className=\"row justify-content-center\">\n          <div className=\"col-xs-12 text-center\">\n            <video className=\"video\" playsInline ref={videoElement} />\n          </div>\n          <canvas\n            style={{ display: 'none' }}\n            ref={canvasEl}\n            width={maxVideoSize}\n            height={maxVideoSize}\n          ></canvas>\n          <canvas\n            className=\"col-xs-12\"\n            style={{ display: 'none' }}\n            ref={outputCanvasEl}\n            width={maxVideoSize}\n            height={maxVideoSize}\n          ></canvas>\n        </div>\n\n        <div\n          className=\"row justify-content-center text-center\"\n          style={{ marginTop: '2em' }}\n        >\n          <div className=\"col-xs-12\">\n            <h5 className=\"text-letter\">Predicted Letter:</h5>\n            <h4\n              className=\"text-letter\"\n              style={{\n                borderRadius: 10,\n                border: '2px solid #FFFFFF',\n                padding: '0.5em',\n              }}\n            >\n              {letter}\n            </h4>\n          </div>\n        </div>\n        <div\n          className=\"row justify-content-center text-center\"\n          style={{ marginTop: '2em' }}\n        >\n          <div className=\"col-xs-12\">\n            <h3 className=\"text-words\">Predicted Words:</h3>\n            <h2\n              className=\"text-words\"\n              style={{\n                borderRadius: 10,\n                border: '2px solid #FFFFFF',\n                padding: '1em',\n              }}\n            >\n              {words}\n            </h2>\n            <p className=\"text-fps\">FPS: {fps.toFixed(3)}</p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}