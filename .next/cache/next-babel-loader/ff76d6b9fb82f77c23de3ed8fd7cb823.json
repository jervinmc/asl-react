{"ast":null,"code":"class CV {\n  /**\n   * We will use this method privately to communicate with the worker and\n   * return a promise with the result of the event. This way we can call\n   * the worker asynchronously.\n   */\n  _dispatch(event) {\n    const {\n      msg\n    } = event;\n    this._status[msg] = ['loading'];\n    this.worker.postMessage(event);\n    return new Promise((res, rej) => {\n      let interval = setInterval(() => {\n        const status = this._status[msg]; // if (!status || status == undefined) res(true);\n\n        if (status[0] === 'done') {\n          res(status[1]);\n        } else if (status[0] === 'error') rej(status[1]);else if (status[0] !== 'loading') {\n          delete this._status[msg];\n          clearInterval(interval);\n        }\n      }, 0);\n    });\n  }\n  /**\n   * First, we will load the worker and we will capture the onmessage\n   * and onerror events to know at all times the status of the event\n   * we have triggered.\n   *\n   * Then, we are going to call the 'load' event, as we've just\n   * implemented it so that the worker can capture it.\n   */\n\n\n  load() {\n    this._status = {};\n    this.worker = new Worker('/js/worker.js'); // load worker\n    // Capture events and save [status, event] inside the _status object\n\n    this.worker.onmessage = e => this._status[e.data.msg] = ['done', e];\n\n    this.worker.onerror = e => this._status[e.data.msg] = ['error', e];\n\n    return this._dispatch({\n      msg: 'load'\n    });\n  }\n  /**\n   * We are going to use the _dispatch event that we created before to\n   * call the postMessage with the msg and the image as payload.\n   *\n   * Thanks to what we have implemented in the _dispatch, this will\n   * return a promise with the processed image.\n   */\n\n\n  imageProcessing(payload) {\n    return this._dispatch({\n      msg: 'imageProcessing',\n      payload\n    });\n  }\n\n  predict(payload) {\n    return this._dispatch({\n      msg: 'predict',\n      payload\n    });\n  }\n\n} // Export the same instant everywhere\n\n\nexport default new CV();","map":null,"metadata":{},"sourceType":"module"}